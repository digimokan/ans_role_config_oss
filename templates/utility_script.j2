#!/bin/sh
# vim: set filetype=sh:

################################################################################
# Purpose:   Provide helper script to work with Open Sound System (OSS)
# Args/Opts: See usage (run with -h option).
# Meta:      Script installed by ansible {{ role_name | basename }}.
# Style:     ENV_VAR, GLOBAL_VAR, GLOBAL_READONLY_VAR, func_local_var, my_func
################################################################################

# GLOBAL VARS:

# Constants
PROG_NAME="$(basename "${0}")"
readonly PROG_NAME
OSS_MIXER_CMD='{{ oss_mixer_cmd }}'
readonly OSS_MIXER_CMD
VOL_ADJUST_PCT='{{ oss_mixer_vol_adjust_pct }}'
readonly VOL_ADJUST_PCT
VOL_UP_CMD='{{ oss_inc_volume_cmd }}'
readonly VOL_UP_CMD
VOL_DOWN_CMD='{{ oss_dec_volume_cmd }}'
readonly VOL_DOWN_CMD

# Mutable User Cmd Option Selections
PRINT_HELP_MENU='false'
LIST_DEVICES='false'
ENABLE_DEVICE='false'
VOL_UP='false'
VOL_DOWN='false'
SET_VOL='false'

# Mutable User Options
PCM_NUM=""
ABSOLUTE_VOL_PCT=""

# LOCAL FUNCTIONS:

print_usage() {
  prog_name_num_chars="$(printf "%s" "${PROG_NAME}" | wc -m)"
  leading_indent=''
  i=0
  while [ "${i}" -lt "${prog_name_num_chars}" ]; do
    leading_indent="${leading_indent} "
    i=$((i + 1))
  done

  printf "USAGE:\n"
  printf "  %s  -h|--help\n" "${PROG_NAME}"
  printf "  %s  -l|--list-devices\n" "${PROG_NAME}"
  printf "  %s  -e <pcm_num>|--enable-device=<pcm_num>\n" "${PROG_NAME}"
  printf "  %s  -u|--vol-up\n" "${PROG_NAME}"
  printf "  %s  -d|--vol-down\n" "${PROG_NAME}"
  printf "  %s  -s <pct>|--set-vol=<pct>\n" "${PROG_NAME}"
  printf "DETAILS:\n"
  printf "  -h, --help\n"
  printf "      print this help message\n"
  printf "  -l, --list-devices\n"
  printf "      list all PCM devices, and their outputs (\"play\") and inputs (\"rec\")\n"
  printf "  -e <pcm_num>, --enable-device=<pcm_num>\n"
  printf "      enable device (setting it to \"default\"), activating both its outputs and inputs\n"
  printf "  -u, --vol-up\n"
  printf "      increase volume by %s%%\n" "${VOL_ADJUST_PCT}"
  printf "  -d, --vol-down\n"
  printf "      decrease volume by %s%%\n" "${VOL_ADJUST_PCT}"
  printf "  -s <pct>, --set-vol=<pct>\n"
  printf "      set volume to a number from 0-100\n"
  printf "EXIT CODES:\n"
  printf "    0  ok\n"
  printf "   10  device list/enable error\n"
  printf "   11  volume set error\n"
  printf "  255  usage or options error\n"
}

get_cmd_opts() {
  while getopts ':hle:uds:-:' option; do
    short_opt_arg="${OPTARG}"
    case "${option}" in
      h)  handle_print_help_menu ;;
      l)  handle_list_devices ;;
      e)  handle_enable_device "${short_opt_arg}" ;;
      u)  handle_vol_up ;;
      d)  handle_vol_down ;;
      s)  handle_set_vol "${short_opt_arg}" ;;
      -)  long_opt_name="${OPTARG}"
          long_opt_arg="${OPTARG#*=}"
          case ${long_opt_name} in
            help)             handle_print_help_menu ;;
            help=*)           handle_illegal_long_option_arg "${long_opt_name}" ;;
            list-devices)     handle_list_devices ;;
            list-devices=*)   handle_illegal_long_option_arg "${long_opt_name}" ;;
            enable-device=?*) handle_enable_device "${long_opt_arg}" ;;
            enable-device*)   handle_missing_long_option_arg "${long_opt_name}" ;;
            vol-up)           handle_vol_up ;;
            vol-up=*)         handle_illegal_long_option_arg "${long_opt_name}" ;;
            vol-down)         handle_vol_down ;;
            vol-down=*)       handle_illegal_long_option_arg "${long_opt_name}" ;;
            set-vol=?*)       handle_set_vol "${long_opt_arg}" ;;
            set-vol*)         handle_missing_long_option_arg "${long_opt_name}" ;;
            '')               break ;; # non-option arg starting with '-'
            *)                handle_unknown_option "${long_opt_name}" ;;
          esac ;;
      \?) handle_unknown_option "${short_opt_arg}" ;;
    esac
  done
}

exit_with_cleanup() {
  err_code="${1}"
  exit "${err_code}"
}

print_err_msg() {
  err_msg="${1}"
  printf "ERROR:\n%s: %s\n" "${PROG_NAME}" "${err_msg}"
}

quit_with_err_msg() {
  err_msg="${1}"
  err_code="${2}"
  print_err_msg "${err_msg}"
  exit_with_cleanup "${err_code}"
}

try_silent_with_exit() {
  cmd="${1}"
  err_msg="${2}"
  err_code="${3}"

  eval "${cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_with_err_msg "${err_msg}" "${err_code}"
  fi
}

try_silent_print_with_exit() {
  cmd="${1}"
  op_descrip="${2}"
  err_code="${3}"

  printf "Now %s with \"%s\"...\n" "${op_descrip}" "${cmd}"
  err_msg="error ${op_descrip}"
  try_silent_with_exit \
    "${cmd}" \
    "${err_msg}" "${err_code}"
}

handle_unknown_option() {
  short_opt_letter_or_long_opt_name="${1}"
  err_msg="unknown option \"${short_opt_letter_or_long_opt_name}\""
  quit_with_err_msg "${err_msg}" 255
}

handle_illegal_long_option_arg() {
  long_opt_name="${1}"
  err_msg="illegal argument in \"${long_opt_name}\""
  quit_with_err_msg "${err_msg}" 255
}

handle_missing_long_option_arg() {
  long_opt_name="${1}"
  err_msg="missing argument for option \"${long_opt_name}\""
  quit_with_err_msg "${err_msg}" 255
}

handle_print_help_menu() {
  if [ "${LIST_DEVICES}" = 'true' ] || \
     [ "${ENABLE_DEVICE}" = 'true' ] || \
     [ "${VOL_UP}" = 'true' ] || \
     [ "${VOL_DOWN}" = 'true' ] || \
     [ "${SET_VOL}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  PRINT_HELP_MENU='true'
}

handle_list_devices() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${ENABLE_DEVICE}" = 'true' ] || \
     [ "${VOL_UP}" = 'true' ] || \
     [ "${VOL_DOWN}" = 'true' ] || \
     [ "${SET_VOL}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  LIST_DEVICES='true'
}

handle_enable_device() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_DEVICES}" = 'true' ] || \
     [ "${VOL_UP}" = 'true' ] || \
     [ "${VOL_DOWN}" = 'true' ] || \
     [ "${SET_VOL}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  ENABLE_DEVICE='true'
  PCM_NUM="${1}"
}

handle_vol_up() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_DEVICES}" = 'true' ] || \
     [ "${ENABLE_DEVICE}" = 'true' ] || \
     [ "${VOL_DOWN}" = 'true' ] || \
     [ "${SET_VOL}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  VOL_UP='true'
}

handle_vol_down() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_DEVICES}" = 'true' ] || \
     [ "${ENABLE_DEVICE}" = 'true' ] || \
     [ "${VOL_UP}" = 'true' ] || \
     [ "${SET_VOL}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  VOL_DOWN='true'
}

handle_set_vol() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_DEVICES}" = 'true' ] || \
     [ "${ENABLE_DEVICE}" = 'true' ] || \
     [ "${VOL_UP}" = 'true' ] || \
     [ "${VOL_DOWN}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 255
  fi
  SET_VOL='true'
  ABSOLUTE_VOL_PCT="${1}"
}

do_print_help_menu() {
  print_usage
}

do_list_devices() {
  try_silent_print_with_exit \
    "cat \"/dev/sndstat\"" \
    "listing sound devices" 10
}

do_enable_device() {
  try_silent_print_with_exit \
    "sysctl hw.snd.default_unit=${PCM_NUM}" \
    "enabling default sound device" 10
}

do_vol_up() {
  try_silent_print_with_exit \
    "${VOL_UP_CMD}" \
    "increasing volume" 11
}

do_vol_down() {
  try_silent_print_with_exit \
    "${VOL_DOWN_CMD}" \
    "decreasing volume" 11
}

do_set_vol() {
  try_silent_print_with_exit \
    "${OSS_MIXER_CMD} vol=${ABSOLUTE_VOL_PCT}%" \
    "setting volume" 11
}

# MAIN SCRIPT:

main() {
  get_cmd_opts "$@"

  if [ "${PRINT_HELP_MENU}" = 'true' ]; then
    do_print_help_menu
  elif [ "${LIST_DEVICES}" = 'true' ]; then
    do_list_devices
  elif [ "${ENABLE_DEVICE}" = 'true' ]; then
    do_enable_device
  elif [ "${VOL_UP}" = 'true' ]; then
    do_vol_up
  elif [ "${VOL_DOWN}" = 'true' ]; then
    do_vol_down
  elif [ "${SET_VOL}" = 'true' ]; then
    do_set_vol
  else
    quit_with_err_msg "no valid option selected" 255
  fi

  exit_with_cleanup 0
}

main "$@"

